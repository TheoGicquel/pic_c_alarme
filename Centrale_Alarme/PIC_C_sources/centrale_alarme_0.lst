CCS PCH C Compiler, Version 4.104, 5967               18-mars-20 19:27

               Filename: C:\Users\33695\Documents\git\software-semester2\architecture\TP\Centrale_Alarme\PIC_C_sources\centrale_alarme_0.lst

               ROM used: 2510 bytes (8%)
                         Largest free fragment is 30258
               RAM used: 60 (4%) at main() level
                         90 (6%) worst case
               Stack:    5 worst case (0 in main + 5 for interrupts)

*
0000:  GOTO   08E6
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00C4
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   05B4
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... #include "C:\Users\33695\Documents\git\software-semester2\architecture\TP\Centrale_Alarme\PIC_C_sources\centrale_alarme_0.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES RC_IO                 	//Resistor/Capacitor Osc 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOOSCSEN              	//Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... // data type 
....................    #define bool int 
....................    #define true 1 
....................    #define false 0 
....................  
.................... // numpad config 
....................    // columns 
....................    #define c1h output_high(pin_d0) 
....................    #define c1l output_low(pin_d0) 
....................  
....................    #define c2h output_high(pin_d1) 
....................    #define c2l output_low(pin_d1) 
....................  
....................    #define c3h output_high(pin_d2) 
....................    #define c3l output_low(pin_d2) 
....................  
....................    // row 
....................    #define l1 input(pin_d3) 
....................    #define l2 input(pin_d4) 
....................    #define l3 input(pin_d5) 
....................    #define l4 input(pin_d6) 
....................  
.................... // sensors 
....................    // immediat 
....................    #define c_im1 input(pin_b1) 
....................    #define c_im2 input(pin_b2) 
....................    #define c_im3 input(pin_b3) 
....................    #define c_im4  input(pin_b4) 
....................     
....................    // retarded 
....................    #define c_ret1 input(pin_b5) 
....................    #define c_ret2 input(pin_b6) 
....................     
.................... // passwords 
....................    int32 codeArm=33; 
....................    int32 codeDisarm=1664; 
....................  
.................... //timers 
....................    int32 timer_alarm = 0; 
....................    int32 timer_last_alarm = 0; 
....................    int32 timer_activation = 0; 
....................    int32 timer_change_code = 0; 
.................... //activation bool 
....................    int alarm_active = 0; 
....................  
.................... // prototypage 
....................    void inputRead(); 
....................    void reset(); 
....................    void changeArm(int newArm); 
....................    void changeDisarm(int newDisarm); 
....................    void changeDelay(int newDelay); 
....................    void changeTempor(int newTempo); 
....................    void changeDeclench(int newDeclench); 
....................    void changeRearm(int newRearm); 
....................    void ARM(); 
....................    void DISARM(); 
....................  
....................    int detect_im(); 
....................    int sensor_ret(); 
....................  
....................  
....................  
.................... #define buzzer_on output_high(pin_a0) 
.................... #define buzzer_off output_low(pin_a0) 
....................  
.................... // Memory 
.................... int32 input=0; 
.................... int8 dix=0,sec=0,min=0; // time units 
.................... int16 T1=0,T2=0,T3=0; // timers 
....................  
.................... /**--------------------------------INTERRUPTS-------------------------------**/   
....................  
....................  
.................... #int_TIMER1 
.................... void  TIMER1_isr(void) //each .1 seconds 
.................... { 
....................    set_timer1(3036); 
*
00C4:  MOVLW  0B
00C6:  MOVWF  FCF
00C8:  MOVLW  DC
00CA:  MOVWF  FCE
....................    dix++; 
00CC:  INCF   33,F
....................    if(dix==10){sec++;dix=0;T1++;T2--;T3++;} 
00CE:  MOVF   33,W
00D0:  SUBLW  0A
00D2:  BNZ   00EC
00D4:  INCF   34,F
00D6:  CLRF   33
00D8:  INCF   36,F
00DA:  BTFSC  FD8.2
00DC:  INCF   37,F
00DE:  MOVF   38,W
00E0:  BTFSC  FD8.2
00E2:  DECF   39,F
00E4:  DECF   38,F
00E6:  INCF   3A,F
00E8:  BTFSC  FD8.2
00EA:  INCF   3B,F
....................    if(sec==60){min++;sec=0;} 
00EC:  MOVF   34,W
00EE:  SUBLW  3C
00F0:  BNZ   00F6
00F2:  INCF   35,F
00F4:  CLRF   34
....................    if(timer_alarm!=0 && dix==10){timer_alarm--;printf("#! \r\n");}    
00F6:  MOVF   1E,F
00F8:  BNZ   0106
00FA:  MOVF   1F,F
00FC:  BNZ   0106
00FE:  MOVF   20,F
0100:  BNZ   0106
0102:  MOVF   21,F
0104:  BZ    0126
0106:  MOVF   33,W
0108:  SUBLW  0A
010A:  BNZ   0126
010C:  MOVLW  FF
010E:  ADDWF  1E,F
0110:  BTFSS  FD8.0
0112:  ADDWF  1F,F
0114:  BTFSS  FD8.0
0116:  ADDWF  20,F
0118:  BTFSS  FD8.0
011A:  ADDWF  21,F
011C:  MOVLW  8C
011E:  MOVWF  FF6
0120:  MOVLW  01
0122:  MOVWF  FF7
0124:  RCALL  00A2
....................    if(timer_last_alarm!=0){timer_last_alarm--;} 
0126:  MOVF   22,F
0128:  BNZ   0136
012A:  MOVF   23,F
012C:  BNZ   0136
012E:  MOVF   24,F
0130:  BNZ   0136
0132:  MOVF   25,F
0134:  BZ    0146
0136:  MOVLW  FF
0138:  ADDWF  22,F
013A:  BTFSS  FD8.0
013C:  ADDWF  23,F
013E:  BTFSS  FD8.0
0140:  ADDWF  24,F
0142:  BTFSS  FD8.0
0144:  ADDWF  25,F
....................    if(timer_activation!=0){timer_activation--;} 
0146:  MOVF   26,F
0148:  BNZ   0156
014A:  MOVF   27,F
014C:  BNZ   0156
014E:  MOVF   28,F
0150:  BNZ   0156
0152:  MOVF   29,F
0154:  BZ    0166
0156:  MOVLW  FF
0158:  ADDWF  26,F
015A:  BTFSS  FD8.0
015C:  ADDWF  27,F
015E:  BTFSS  FD8.0
0160:  ADDWF  28,F
0162:  BTFSS  FD8.0
0164:  ADDWF  29,F
....................    if(timer_change_code!=0){timer_change_code--;} 
0166:  MOVF   2A,F
0168:  BNZ   0176
016A:  MOVF   2B,F
016C:  BNZ   0176
016E:  MOVF   2C,F
0170:  BNZ   0176
0172:  MOVF   2D,F
0174:  BZ    0186
0176:  MOVLW  FF
0178:  ADDWF  2A,F
017A:  BTFSS  FD8.0
017C:  ADDWF  2B,F
017E:  BTFSS  FD8.0
0180:  ADDWF  2C,F
0182:  BTFSS  FD8.0
0184:  ADDWF  2D,F
.................... } 
....................  
0186:  BCF    F9E.0
0188:  GOTO   0060
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................    // column 1 
....................    c1h;c2l;c3l; 
*
05B4:  BCF    F95.0
05B6:  BSF    F8C.0
05B8:  BCF    F95.1
05BA:  BCF    F8C.1
05BC:  BCF    F95.2
05BE:  BCF    F8C.2
....................    if(l1){printf("1");input=10*input+1;} 
05C0:  BSF    F95.3
05C2:  BTFSS  F83.3
05C4:  BRA    0602
05C6:  MOVLW  31
05C8:  BTFSS  F9E.4
05CA:  BRA    05C8
05CC:  MOVWF  FAD
05CE:  CLRF   3F
05D0:  CLRF   3E
05D2:  CLRF   3D
05D4:  MOVLW  0A
05D6:  MOVWF  3C
05D8:  MOVFF  32,43
05DC:  MOVFF  31,42
05E0:  MOVFF  30,41
05E4:  MOVFF  2F,40
05E8:  RCALL  0192
05EA:  MOVLW  01
05EC:  ADDWF  00,W
05EE:  MOVWF  2F
05F0:  MOVLW  00
05F2:  ADDWFC 01,W
05F4:  MOVWF  30
05F6:  MOVLW  00
05F8:  ADDWFC 02,W
05FA:  MOVWF  31
05FC:  MOVLW  00
05FE:  ADDWFC 03,W
0600:  MOVWF  32
....................    if(l2){printf("4");input=10*input+4;} 
0602:  BSF    F95.4
0604:  BTFSS  F83.4
0606:  BRA    0644
0608:  MOVLW  34
060A:  BTFSS  F9E.4
060C:  BRA    060A
060E:  MOVWF  FAD
0610:  CLRF   3F
0612:  CLRF   3E
0614:  CLRF   3D
0616:  MOVLW  0A
0618:  MOVWF  3C
061A:  MOVFF  32,43
061E:  MOVFF  31,42
0622:  MOVFF  30,41
0626:  MOVFF  2F,40
062A:  RCALL  0192
062C:  MOVLW  04
062E:  ADDWF  00,W
0630:  MOVWF  2F
0632:  MOVLW  00
0634:  ADDWFC 01,W
0636:  MOVWF  30
0638:  MOVLW  00
063A:  ADDWFC 02,W
063C:  MOVWF  31
063E:  MOVLW  00
0640:  ADDWFC 03,W
0642:  MOVWF  32
....................    if(l3){printf("7");input=10*input+7;} 
0644:  BSF    F95.5
0646:  BTFSS  F83.5
0648:  BRA    0686
064A:  MOVLW  37
064C:  BTFSS  F9E.4
064E:  BRA    064C
0650:  MOVWF  FAD
0652:  CLRF   3F
0654:  CLRF   3E
0656:  CLRF   3D
0658:  MOVLW  0A
065A:  MOVWF  3C
065C:  MOVFF  32,43
0660:  MOVFF  31,42
0664:  MOVFF  30,41
0668:  MOVFF  2F,40
066C:  RCALL  0192
066E:  MOVLW  07
0670:  ADDWF  00,W
0672:  MOVWF  2F
0674:  MOVLW  00
0676:  ADDWFC 01,W
0678:  MOVWF  30
067A:  MOVLW  00
067C:  ADDWFC 02,W
067E:  MOVWF  31
0680:  MOVLW  00
0682:  ADDWFC 03,W
0684:  MOVWF  32
....................    if(l4){printf("*");} 
0686:  BSF    F95.6
0688:  BTFSS  F83.6
068A:  BRA    0694
068C:  MOVLW  2A
068E:  BTFSS  F9E.4
0690:  BRA    068E
0692:  MOVWF  FAD
....................  
....................    // column 2 
....................    c1l;c2h;c3l; 
0694:  BCF    F95.0
0696:  BCF    F8C.0
0698:  BCF    F95.1
069A:  BSF    F8C.1
069C:  BCF    F95.2
069E:  BCF    F8C.2
....................    if(l1){printf("2");input=10*input+2;} 
06A0:  BSF    F95.3
06A2:  BTFSS  F83.3
06A4:  BRA    06E2
06A6:  MOVLW  32
06A8:  BTFSS  F9E.4
06AA:  BRA    06A8
06AC:  MOVWF  FAD
06AE:  CLRF   3F
06B0:  CLRF   3E
06B2:  CLRF   3D
06B4:  MOVLW  0A
06B6:  MOVWF  3C
06B8:  MOVFF  32,43
06BC:  MOVFF  31,42
06C0:  MOVFF  30,41
06C4:  MOVFF  2F,40
06C8:  RCALL  0192
06CA:  MOVLW  02
06CC:  ADDWF  00,W
06CE:  MOVWF  2F
06D0:  MOVLW  00
06D2:  ADDWFC 01,W
06D4:  MOVWF  30
06D6:  MOVLW  00
06D8:  ADDWFC 02,W
06DA:  MOVWF  31
06DC:  MOVLW  00
06DE:  ADDWFC 03,W
06E0:  MOVWF  32
....................    if(l2){printf("5");input=10*input+5;} 
06E2:  BSF    F95.4
06E4:  BTFSS  F83.4
06E6:  BRA    0724
06E8:  MOVLW  35
06EA:  BTFSS  F9E.4
06EC:  BRA    06EA
06EE:  MOVWF  FAD
06F0:  CLRF   3F
06F2:  CLRF   3E
06F4:  CLRF   3D
06F6:  MOVLW  0A
06F8:  MOVWF  3C
06FA:  MOVFF  32,43
06FE:  MOVFF  31,42
0702:  MOVFF  30,41
0706:  MOVFF  2F,40
070A:  RCALL  0192
070C:  MOVLW  05
070E:  ADDWF  00,W
0710:  MOVWF  2F
0712:  MOVLW  00
0714:  ADDWFC 01,W
0716:  MOVWF  30
0718:  MOVLW  00
071A:  ADDWFC 02,W
071C:  MOVWF  31
071E:  MOVLW  00
0720:  ADDWFC 03,W
0722:  MOVWF  32
....................    if(l3){printf("8");input=10*input+8;} 
0724:  BSF    F95.5
0726:  BTFSS  F83.5
0728:  BRA    0766
072A:  MOVLW  38
072C:  BTFSS  F9E.4
072E:  BRA    072C
0730:  MOVWF  FAD
0732:  CLRF   3F
0734:  CLRF   3E
0736:  CLRF   3D
0738:  MOVLW  0A
073A:  MOVWF  3C
073C:  MOVFF  32,43
0740:  MOVFF  31,42
0744:  MOVFF  30,41
0748:  MOVFF  2F,40
074C:  RCALL  0192
074E:  MOVLW  08
0750:  ADDWF  00,W
0752:  MOVWF  2F
0754:  MOVLW  00
0756:  ADDWFC 01,W
0758:  MOVWF  30
075A:  MOVLW  00
075C:  ADDWFC 02,W
075E:  MOVWF  31
0760:  MOVLW  00
0762:  ADDWFC 03,W
0764:  MOVWF  32
....................    if(l4){printf("0");input=10*input;} 
0766:  BSF    F95.6
0768:  BTFSS  F83.6
076A:  BRA    07A0
076C:  MOVLW  30
076E:  BTFSS  F9E.4
0770:  BRA    076E
0772:  MOVWF  FAD
0774:  CLRF   3F
0776:  CLRF   3E
0778:  CLRF   3D
077A:  MOVLW  0A
077C:  MOVWF  3C
077E:  MOVFF  32,43
0782:  MOVFF  31,42
0786:  MOVFF  30,41
078A:  MOVFF  2F,40
078E:  RCALL  0192
0790:  MOVFF  03,32
0794:  MOVFF  02,31
0798:  MOVFF  01,30
079C:  MOVFF  00,2F
....................  
....................    // column 3 
....................    c1l;c2l;c3h; 
07A0:  BCF    F95.0
07A2:  BCF    F8C.0
07A4:  BCF    F95.1
07A6:  BCF    F8C.1
07A8:  BCF    F95.2
07AA:  BSF    F8C.2
....................    if(l1){printf("3");input=10*input+3;} 
07AC:  BSF    F95.3
07AE:  BTFSS  F83.3
07B0:  BRA    07EE
07B2:  MOVLW  33
07B4:  BTFSS  F9E.4
07B6:  BRA    07B4
07B8:  MOVWF  FAD
07BA:  CLRF   3F
07BC:  CLRF   3E
07BE:  CLRF   3D
07C0:  MOVLW  0A
07C2:  MOVWF  3C
07C4:  MOVFF  32,43
07C8:  MOVFF  31,42
07CC:  MOVFF  30,41
07D0:  MOVFF  2F,40
07D4:  RCALL  0192
07D6:  MOVLW  03
07D8:  ADDWF  00,W
07DA:  MOVWF  2F
07DC:  MOVLW  00
07DE:  ADDWFC 01,W
07E0:  MOVWF  30
07E2:  MOVLW  00
07E4:  ADDWFC 02,W
07E6:  MOVWF  31
07E8:  MOVLW  00
07EA:  ADDWFC 03,W
07EC:  MOVWF  32
....................    if(l2){printf("6");input=10*input+6;} 
07EE:  BSF    F95.4
07F0:  BTFSS  F83.4
07F2:  BRA    0830
07F4:  MOVLW  36
07F6:  BTFSS  F9E.4
07F8:  BRA    07F6
07FA:  MOVWF  FAD
07FC:  CLRF   3F
07FE:  CLRF   3E
0800:  CLRF   3D
0802:  MOVLW  0A
0804:  MOVWF  3C
0806:  MOVFF  32,43
080A:  MOVFF  31,42
080E:  MOVFF  30,41
0812:  MOVFF  2F,40
0816:  RCALL  0192
0818:  MOVLW  06
081A:  ADDWF  00,W
081C:  MOVWF  2F
081E:  MOVLW  00
0820:  ADDWFC 01,W
0822:  MOVWF  30
0824:  MOVLW  00
0826:  ADDWFC 02,W
0828:  MOVWF  31
082A:  MOVLW  00
082C:  ADDWFC 03,W
082E:  MOVWF  32
....................    if(l3){printf("9");input=10*input+9;} 
0830:  BSF    F95.5
0832:  BTFSS  F83.5
0834:  BRA    0872
0836:  MOVLW  39
0838:  BTFSS  F9E.4
083A:  BRA    0838
083C:  MOVWF  FAD
083E:  CLRF   3F
0840:  CLRF   3E
0842:  CLRF   3D
0844:  MOVLW  0A
0846:  MOVWF  3C
0848:  MOVFF  32,43
084C:  MOVFF  31,42
0850:  MOVFF  30,41
0854:  MOVFF  2F,40
0858:  RCALL  0192
085A:  MOVLW  09
085C:  ADDWF  00,W
085E:  MOVWF  2F
0860:  MOVLW  00
0862:  ADDWFC 01,W
0864:  MOVWF  30
0866:  MOVLW  00
0868:  ADDWFC 02,W
086A:  MOVWF  31
086C:  MOVLW  00
086E:  ADDWFC 03,W
0870:  MOVWF  32
....................    if(l4){printf("#");inputRead();} 
0872:  BSF    F95.6
0874:  BTFSS  F83.6
0876:  BRA    0882
0878:  MOVLW  23
087A:  BTFSS  F9E.4
087C:  BRA    087A
087E:  MOVWF  FAD
0880:  BRA    03AE
....................     
....................    // reset columns 
....................    c1h;c2h;c3h; 
0882:  BCF    F95.0
0884:  BSF    F8C.0
0886:  BCF    F95.1
0888:  BSF    F8C.1
088A:  BCF    F95.2
088C:  BSF    F8C.2
.................... } 
....................  
.................... /**--------------------------------FUNCTIONS---------------------------------**/   
....................  
088E:  BCF    FF2.1
0890:  GOTO   0060
.................... void inputRead() 
.................... { 
....................    if(input==990000){reset();} // RaZ 
*
03AE:  MOVF   2F,W
03B0:  SUBLW  30
03B2:  BNZ   03C6
03B4:  MOVF   30,W
03B6:  SUBLW  1B
03B8:  BNZ   03C6
03BA:  MOVF   31,W
03BC:  SUBLW  0F
03BE:  BNZ   03C6
03C0:  MOVF   32,F
03C2:  BNZ   03C6
03C4:  BRA    01E6
....................    if(input>=1000 && input<1100){changeArm(input-1000);} // chg code arm 
03C6:  MOVF   32,F
03C8:  BNZ   03DE
03CA:  MOVF   31,F
03CC:  BNZ   03DE
03CE:  MOVF   30,W
03D0:  SUBLW  02
03D2:  BC    0412
03D4:  XORLW  FF
03D6:  BNZ   03DE
03D8:  MOVF   2F,W
03DA:  SUBLW  E7
03DC:  BC    0412
03DE:  MOVF   32,F
03E0:  BNZ   0412
03E2:  MOVF   31,F
03E4:  BNZ   0412
03E6:  MOVF   30,W
03E8:  SUBLW  04
03EA:  BNC   0412
03EC:  BNZ   03F4
03EE:  MOVF   2F,W
03F0:  SUBLW  4B
03F2:  BNC   0412
03F4:  MOVLW  E8
03F6:  SUBWF  2F,W
03F8:  MOVWF  3C
03FA:  MOVLW  03
03FC:  SUBWFB 30,W
03FE:  MOVWF  3D
0400:  MOVLW  00
0402:  SUBWFB 31,W
0404:  MOVWF  3E
0406:  MOVLW  00
0408:  SUBWFB 32,W
040A:  MOVWF  3F
040C:  MOVFF  3C,40
0410:  BRA    034A
....................    if(input==110000 && input<120000){changeDisarm(input-110000);} // chg code desarmement 
0412:  MOVF   2F,W
0414:  SUBLW  B0
0416:  BNZ   045E
0418:  MOVF   30,W
041A:  SUBLW  AD
041C:  BNZ   045E
041E:  DECFSZ 31,W
0420:  BRA    045E
0422:  MOVF   32,F
0424:  BNZ   045E
0426:  MOVF   32,F
0428:  BNZ   045E
042A:  MOVF   31,W
042C:  SUBLW  01
042E:  BNC   045E
0430:  BNZ   0440
0432:  MOVF   30,W
0434:  SUBLW  D4
0436:  BNC   045E
0438:  BNZ   0440
043A:  MOVF   2F,W
043C:  SUBLW  BF
043E:  BNC   045E
0440:  MOVLW  B0
0442:  SUBWF  2F,W
0444:  MOVWF  3C
0446:  MOVLW  AD
0448:  SUBWFB 30,W
044A:  MOVWF  3D
044C:  MOVLW  01
044E:  SUBWFB 31,W
0450:  MOVWF  3E
0452:  MOVLW  00
0454:  SUBWFB 32,W
0456:  MOVWF  3F
0458:  MOVFF  3C,40
045C:  BRA    038C
....................    if(input>=2000 && input<2100){changeDelay(input-2000);}// retard zone diff 
045E:  MOVF   32,F
0460:  BNZ   0476
0462:  MOVF   31,F
0464:  BNZ   0476
0466:  MOVF   30,W
0468:  SUBLW  06
046A:  BC    04AA
046C:  XORLW  FF
046E:  BNZ   0476
0470:  MOVF   2F,W
0472:  SUBLW  CF
0474:  BC    04AA
0476:  MOVF   32,F
0478:  BNZ   04AA
047A:  MOVF   31,F
047C:  BNZ   04AA
047E:  MOVF   30,W
0480:  SUBLW  08
0482:  BNC   04AA
0484:  BNZ   048C
0486:  MOVF   2F,W
0488:  SUBLW  33
048A:  BNC   04AA
048C:  MOVLW  D0
048E:  SUBWF  2F,W
0490:  MOVWF  3C
0492:  MOVLW  07
0494:  SUBWFB 30,W
0496:  MOVWF  3D
0498:  MOVLW  00
049A:  SUBWFB 31,W
049C:  MOVWF  3E
049E:  MOVLW  00
04A0:  SUBWFB 32,W
04A2:  MOVWF  3F
04A4:  MOVFF  3C,40
04A8:  BRA    0004
....................    if(input>=2100 && input<2200){changeTempor(input-2100);}//temporisation 
04AA:  MOVF   32,F
04AC:  BNZ   04C2
04AE:  MOVF   31,F
04B0:  BNZ   04C2
04B2:  MOVF   30,W
04B4:  SUBLW  07
04B6:  BC    04F6
04B8:  XORLW  FF
04BA:  BNZ   04C2
04BC:  MOVF   2F,W
04BE:  SUBLW  33
04C0:  BC    04F6
04C2:  MOVF   32,F
04C4:  BNZ   04F6
04C6:  MOVF   31,F
04C8:  BNZ   04F6
04CA:  MOVF   30,W
04CC:  SUBLW  08
04CE:  BNC   04F6
04D0:  BNZ   04D8
04D2:  MOVF   2F,W
04D4:  SUBLW  97
04D6:  BNC   04F6
04D8:  MOVLW  34
04DA:  SUBWF  2F,W
04DC:  MOVWF  3C
04DE:  MOVLW  08
04E0:  SUBWFB 30,W
04E2:  MOVWF  3D
04E4:  MOVLW  00
04E6:  SUBWFB 31,W
04E8:  MOVWF  3E
04EA:  MOVLW  00
04EC:  SUBWFB 32,W
04EE:  MOVWF  3F
04F0:  MOVFF  3C,40
04F4:  BRA    039A
....................    if(input>=30000 && input<30180){changeDeclench(input-30000);} //duree declenc 
04F6:  MOVF   32,F
04F8:  BNZ   050E
04FA:  MOVF   31,F
04FC:  BNZ   050E
04FE:  MOVF   30,W
0500:  SUBLW  74
0502:  BC    0542
0504:  XORLW  FF
0506:  BNZ   050E
0508:  MOVF   2F,W
050A:  SUBLW  2F
050C:  BC    0542
050E:  MOVF   32,F
0510:  BNZ   0542
0512:  MOVF   31,F
0514:  BNZ   0542
0516:  MOVF   30,W
0518:  SUBLW  75
051A:  BNC   0542
051C:  BNZ   0524
051E:  MOVF   2F,W
0520:  SUBLW  E3
0522:  BNC   0542
0524:  MOVLW  30
0526:  SUBWF  2F,W
0528:  MOVWF  3C
052A:  MOVLW  75
052C:  SUBWFB 30,W
052E:  MOVWF  3D
0530:  MOVLW  00
0532:  SUBWFB 31,W
0534:  MOVWF  3E
0536:  MOVLW  00
0538:  SUBWFB 32,W
053A:  MOVWF  3F
053C:  MOVFF  3C,40
0540:  BRA    039E
....................    if(input>=3100 && input<3200){changeRearm(input-30000);} //nbr rearm auto 
0542:  MOVF   32,F
0544:  BNZ   055A
0546:  MOVF   31,F
0548:  BNZ   055A
054A:  MOVF   30,W
054C:  SUBLW  0B
054E:  BC    058E
0550:  XORLW  FF
0552:  BNZ   055A
0554:  MOVF   2F,W
0556:  SUBLW  1B
0558:  BC    058E
055A:  MOVF   32,F
055C:  BNZ   058E
055E:  MOVF   31,F
0560:  BNZ   058E
0562:  MOVF   30,W
0564:  SUBLW  0C
0566:  BNC   058E
0568:  BNZ   0570
056A:  MOVF   2F,W
056C:  SUBLW  7F
056E:  BNC   058E
0570:  MOVLW  30
0572:  SUBWF  2F,W
0574:  MOVWF  3C
0576:  MOVLW  75
0578:  SUBWFB 30,W
057A:  MOVWF  3D
057C:  MOVLW  00
057E:  SUBWFB 31,W
0580:  MOVWF  3E
0582:  MOVLW  00
0584:  SUBWFB 32,W
0586:  MOVWF  3F
0588:  MOVFF  3C,40
058C:  BRA    03A2
....................    if(input==codeArm){ARM();} 
058E:  MOVF   16,W
0590:  SUBWF  2F,W
0592:  BNZ   05A8
0594:  MOVF   17,W
0596:  SUBWF  30,W
0598:  BNZ   05A8
059A:  MOVF   18,W
059C:  SUBWF  31,W
059E:  BNZ   05A8
05A0:  MOVF   19,W
05A2:  SUBWF  32,W
05A4:  BNZ   05A8
05A6:  BRA    03A6
....................    input=0; 
05A8:  CLRF   32
05AA:  CLRF   31
05AC:  CLRF   30
05AE:  CLRF   2F
.................... } 
05B0:  GOTO   0882 (RETURN)
....................  
.................... void ARM(){alarm_active=1;} 
*
03A6:  MOVLW  01
03A8:  MOVWF  2E
03AA:  GOTO   05A8 (RETURN)
....................  
.................... void DISARM(){alarm_active=0;} 
....................  
....................  
.................... /**-----------------------------------MODIFICATION PARAM---------------------**/ 
....................  
....................  
.................... void reset() 
.................... { 
....................    printf("\r\n// reset //\r\n"); 
*
01E6:  MOVLW  94
01E8:  MOVWF  FF6
01EA:  MOVLW  08
01EC:  MOVWF  FF7
01EE:  RCALL  00A2
....................    codeDisarm=1664; 
01F0:  CLRF   1D
01F2:  CLRF   1C
01F4:  MOVLW  06
01F6:  MOVWF  1B
01F8:  MOVLW  80
01FA:  MOVWF  1A
.................... } 
01FC:  GOTO   03C6 (RETURN)
....................  
.................... void changeArm(int newArm){codeArm=newArm;printf("\r\n [NV CODE ARMEMENT : %lu ]",codeArm);} 
*
034A:  CLRF   19
034C:  CLRF   18
034E:  CLRF   17
0350:  MOVFF  40,16
0354:  MOVLW  A4
0356:  MOVWF  FF6
0358:  MOVLW  08
035A:  MOVWF  FF7
035C:  MOVLW  17
035E:  MOVWF  41
0360:  BRA    0200
0362:  MOVLW  41
0364:  MOVWF  FE9
0366:  MOVFF  19,44
036A:  MOVFF  18,43
036E:  MOVFF  17,42
0372:  MOVFF  16,41
0376:  BRA    029C
0378:  MOVLW  20
037A:  BTFSS  F9E.4
037C:  BRA    037A
037E:  MOVWF  FAD
0380:  MOVLW  5D
0382:  BTFSS  F9E.4
0384:  BRA    0382
0386:  MOVWF  FAD
0388:  GOTO   0412 (RETURN)
.................... void changeDisarm(int newDisarm){printf("\r\n// changer code desarmement //\r\n");} 
038C:  MOVLW  C2
038E:  MOVWF  FF6
0390:  MOVLW  08
0392:  MOVWF  FF7
0394:  RCALL  00A2
0396:  GOTO   045E (RETURN)
.................... void changeDelay(int newDelay){} 
*
0004:  GOTO   04AA (RETURN)
.................... void changeTempor(int newTempo){} 
*
039A:  GOTO   04F6 (RETURN)
.................... void changeDeclench(int newDeclench){} 
039E:  GOTO   0542 (RETURN)
.................... void changeRearm(int newRearm){} 
03A2:  GOTO   058E (RETURN)
....................  
....................  
.................... /**-----------------------------------SONNERIES-----------------------------**/ 
....................  
.................... void beep(){ 
....................    buzzer_on; 
....................    delay_ms(500); 
....................    buzzer_off; 
....................    delay_ms(500); 
.................... } 
....................  
....................  
.................... void trigger_alarm(int time, int cooldown) 
.................... { 
....................    timer_alarm = time; //the alarm rings for Xs 
....................    timer_last_alarm = cooldown; //the alarm can't be trigered during the x next seconds 
....................    while(!timer_alarm && alarm_active && timer_last_alarm==0) 
....................    { 
....................       buzzer_on; 
....................    } 
....................    buzzer_off; 
....................  
....................     
....................  
.................... } 
....................  
.................... void beeper(int time, int cooldown) 
.................... { 
....................  
.................... } 
....................  
....................  
....................  
....................  
.................... /**-----------------------------------DETECTEURS-----------------------------**/ 
....................  
.................... int detect_im(){ 
....................    bool result=false; 
....................    if (c_im1){result=true;output_high(pin_c1);}else{output_low(pin_c1);} 
....................    if (c_im2){result=true;output_high(pin_c2);}else{output_low(pin_c2);} 
....................    if (c_im3){result=true;output_high(pin_c5);}else{output_low(pin_c5);} 
....................    if (c_im4){result=true;output_high(pin_c4);}else{output_low(pin_c4);} 
....................    return result; 
.................... } 
....................  
.................... int detect_ret(){ 
....................    int result=0; 
....................    if (c_ret1){result=1;output_high(pin_e0);}else{output_low(pin_e0);} 
....................    if (c_ret2){result=1;output_high(pin_e1);}else{output_low(pin_e1);} 
....................    return result; 
.................... } 
....................  
.................... /**-----------------------------------MAIN-----------------------------------**/   
.................... void main() 
.................... { 
*
08E6:  CLRF   FF8
08E8:  BCF    FD0.7
08EA:  BSF    07.7
08EC:  CLRF   FEA
08EE:  CLRF   FE9
08F0:  MOVLW  81
08F2:  MOVWF  FAF
08F4:  MOVLW  A6
08F6:  MOVWF  FAC
08F8:  MOVLW  90
08FA:  MOVWF  FAB
08FC:  CLRF   19
08FE:  CLRF   18
0900:  CLRF   17
0902:  MOVLW  21
0904:  MOVWF  16
0906:  CLRF   1D
0908:  CLRF   1C
090A:  MOVLW  06
090C:  MOVWF  1B
090E:  MOVLW  80
0910:  MOVWF  1A
0912:  CLRF   21
0914:  CLRF   20
0916:  CLRF   1F
0918:  CLRF   1E
091A:  CLRF   25
091C:  CLRF   24
091E:  CLRF   23
0920:  CLRF   22
0922:  CLRF   29
0924:  CLRF   28
0926:  CLRF   27
0928:  CLRF   26
092A:  CLRF   2D
092C:  CLRF   2C
092E:  CLRF   2B
0930:  CLRF   2A
0932:  CLRF   2E
0934:  CLRF   32
0936:  CLRF   31
0938:  CLRF   30
093A:  CLRF   2F
093C:  CLRF   33
093E:  CLRF   34
0940:  CLRF   35
0942:  CLRF   37
0944:  CLRF   36
0946:  CLRF   39
0948:  CLRF   38
094A:  CLRF   3B
094C:  CLRF   3A
094E:  BSF    FC1.0
0950:  BSF    FC1.1
0952:  BSF    FC1.2
0954:  BCF    FC1.3
....................    setup_adc_ports(NO_ANALOGS); 
0956:  BSF    FC1.0
0958:  BSF    FC1.1
095A:  BSF    FC1.2
095C:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
095E:  BCF    FC1.6
0960:  BCF    FC2.6
0962:  BCF    FC2.7
0964:  BCF    FC1.7
0966:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0968:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
096A:  BCF    FC6.5
096C:  BCF    F94.5
096E:  BSF    F94.4
0970:  BCF    F94.3
0972:  MOVLW  01
0974:  MOVWF  FC6
0976:  MOVLW  00
0978:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
097A:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
097C:  MOVLW  80
097E:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0980:  MOVLW  B5
0982:  MOVWF  FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0984:  MOVLW  00
0986:  MOVWF  FCA
0988:  MOVLW  00
098A:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
098C:  CLRF   FB1
....................    enable_interrupts(INT_TIMER1); 
098E:  BSF    F9D.0
....................    enable_interrupts(INT_EXT); 
0990:  BSF    FF2.4
....................    enable_interrupts(GLOBAL); 
0992:  MOVLW  C0
0994:  IORWF  FF2,F
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................    T1=100; // en sec 
0996:  CLRF   37
0998:  MOVLW  64
099A:  MOVWF  36
....................    T2=3600; // en sec 
099C:  MOVLW  0E
099E:  MOVWF  39
09A0:  MOVLW  10
09A2:  MOVWF  38
....................  
....................    c1h;c2h;c3h; 
09A4:  BCF    F95.0
09A6:  BSF    F8C.0
09A8:  BCF    F95.1
09AA:  BSF    F8C.1
09AC:  BCF    F95.2
09AE:  BSF    F8C.2
....................     
....................     while (true) 
....................    { 
....................       if(timer_alarm==0){timer_alarm=20;} 
09B0:  MOVF   1E,F
09B2:  BNZ   09CA
09B4:  MOVF   1F,F
09B6:  BNZ   09CA
09B8:  MOVF   20,F
09BA:  BNZ   09CA
09BC:  MOVF   21,F
09BE:  BNZ   09CA
09C0:  CLRF   21
09C2:  CLRF   20
09C4:  CLRF   1F
09C6:  MOVLW  14
09C8:  MOVWF  1E
....................      // printf("timer_alarm:%lu \n\r",timer_alarm); 
....................       /** 
....................       printf("timer_alarm:%lu last:%lu \n\r",timer_alarm,timer_last_alarm); 
....................       if(alarm_active){ 
....................          output_high(pin_c0); 
....................  
....................          if(detect_im() && !timer_last_alarm) 
....................          { 
....................             printf("Intrusion detectee"); 
....................             trigger_alarm(10,5); 
....................          } 
....................           
....................          if(detect_ret()==1) 
....................          { 
....................             if(!timer_activation) //alarm is not active yet 
....................             { 
....................                // utiliser beep() pour avertir de la temporisation 
....................                 
....................                    
....................             } 
....................             else if(!timer_last_alarm) //alarm is active 
....................             { 
....................                trigger_alarm(180,300);///A CHANGER POUR TEST 
....................             } 
....................          } 
....................       } 
....................       else 
....................       { 
....................          output_low(pin_c0); 
....................       } 
....................       **/ 
....................    } 
09CA:  BRA    09B0
.................... } 
09CC:  SLEEP 

Configuration Fuses:
   Word  1: 2700   RC_IO NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
