CCS PCH C Compiler, Version 4.104, 5967               04-févr.-20 18:27

               Filename: C:\Users\33695\Documents\git\software-semester2\architecture\TP\timer\timer_0.lst

               ROM used: 696 bytes (2%)
                         Largest free fragment is 32068
               RAM used: 27 (2%) at main() level
                         31 (2%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  GOTO   01CA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00AE
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00D0
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   00DC
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "C:\Users\33695\Documents\git\software-semester2\architecture\TP\timer\timer_0.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOOSCSEN              	//Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #define presRAZ INPUT(PIN_B0) 
....................  
.................... int cent=0,sec=0,min=0; 
.................... int flag; 
.................... #int_TIMER1 
....................  
.................... void  TIMER1_isr(void)  
.................... {  
....................    set_timer1(15536); 
*
00AE:  MOVLW  3C
00B0:  MOVWF  FCF
00B2:  MOVLW  B0
00B4:  MOVWF  FCE
....................    // on passe ici tous les centièmes de secondes 
....................    cent++; 
00B6:  INCF   16,F
....................    if(cent==100){ 
00B8:  MOVF   16,W
00BA:  SUBLW  64
00BC:  BNZ   00C2
....................       sec++; 
00BE:  INCF   17,F
....................       cent=0; 
00C0:  CLRF   16
....................    } 
....................     
....................    if(sec==60){ 
00C2:  MOVF   17,W
00C4:  SUBLW  3C
00C6:  BNZ   00CA
....................    min++; 
00C8:  INCF   18,F
....................    } 
.................... } 
....................  
00CA:  BCF    F9E.0
00CC:  GOTO   006C
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
.................... min=0;sec=0;cent=0; 
00D0:  CLRF   18
00D2:  CLRF   17
00D4:  CLRF   16
.................... } 
....................  
00D6:  BCF    FF2.1
00D8:  GOTO   006C
.................... #int_EXT1 
.................... void  EXT1_isr(void)  
.................... { 
....................    flag=!flag; 
00DC:  MOVF   19,F
00DE:  BZ    00E4
00E0:  MOVLW  00
00E2:  BRA    00E6
00E4:  MOVLW  01
00E6:  MOVWF  19
....................    if(flag){ 
00E8:  MOVF   19,F
00EA:  BZ    00F0
....................       enable_interrupts(INT_TIMER1); 
00EC:  BSF    F9D.0
....................    } 
....................    else 
00EE:  BRA    00F2
....................    { 
....................    disable_interrupts(INT_TIMER1); 
00F0:  BCF    F9D.0
....................    } 
....................  
.................... } 
....................  
....................  
....................  
00F2:  BCF    FF0.0
00F4:  GOTO   006C
.................... void main() 
.................... { 
*
01CA:  CLRF   FF8
01CC:  BCF    FD0.7
01CE:  BSF    07.7
01D0:  CLRF   FEA
01D2:  CLRF   FE9
01D4:  MOVLW  81
01D6:  MOVWF  FAF
01D8:  MOVLW  A6
01DA:  MOVWF  FAC
01DC:  MOVLW  90
01DE:  MOVWF  FAB
01E0:  CLRF   16
01E2:  CLRF   17
01E4:  CLRF   18
01E6:  BSF    FC1.0
01E8:  BSF    FC1.1
01EA:  BSF    FC1.2
01EC:  BCF    FC1.3
....................  
....................    setup_adc_ports(NO_ANALOGS); 
01EE:  BSF    FC1.0
01F0:  BSF    FC1.1
01F2:  BSF    FC1.2
01F4:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
01F6:  BCF    FC1.6
01F8:  BCF    FC2.6
01FA:  BCF    FC2.7
01FC:  BCF    FC1.7
01FE:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0200:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0202:  BCF    FC6.5
0204:  BCF    F94.5
0206:  BSF    F94.4
0208:  BCF    F94.3
020A:  MOVLW  01
020C:  MOVWF  FC6
020E:  MOVLW  00
0210:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0212:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0214:  MOVLW  80
0216:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0218:  MOVLW  85
021A:  MOVWF  FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
021C:  MOVLW  00
021E:  MOVWF  FCA
0220:  MOVLW  00
0222:  MOVWF  FCB
....................    enable_interrupts(INT_TIMER1); 
0224:  BSF    F9D.0
....................    enable_interrupts(INT_EXT); 
0226:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1); 
0228:  BSF    FF0.3
....................    enable_interrupts(GLOBAL); 
022A:  MOVLW  C0
022C:  IORWF  FF2,F
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................  
....................    // TODO: USER CODE!! 
....................  
.................... while(true){ 
....................    printf("elapsed time %u M %u S %u C\n\r",min,sec,cent); 
022E:  MOVLW  F8
0230:  MOVWF  FF6
0232:  MOVLW  00
0234:  MOVWF  FF7
0236:  MOVLW  0D
0238:  MOVWF  1A
023A:  RCALL  0116
023C:  MOVFF  18,1A
0240:  MOVLW  1B
0242:  MOVWF  1B
0244:  RCALL  015E
0246:  MOVLW  20
0248:  BTFSS  F9E.4
024A:  BRA    0248
024C:  MOVWF  FAD
024E:  MOVLW  4D
0250:  BTFSS  F9E.4
0252:  BRA    0250
0254:  MOVWF  FAD
0256:  MOVLW  20
0258:  BTFSS  F9E.4
025A:  BRA    0258
025C:  MOVWF  FAD
025E:  MOVFF  17,1A
0262:  MOVLW  1B
0264:  MOVWF  1B
0266:  RCALL  015E
0268:  MOVLW  20
026A:  BTFSS  F9E.4
026C:  BRA    026A
026E:  MOVWF  FAD
0270:  MOVLW  53
0272:  BTFSS  F9E.4
0274:  BRA    0272
0276:  MOVWF  FAD
0278:  MOVLW  20
027A:  BTFSS  F9E.4
027C:  BRA    027A
027E:  MOVWF  FAD
0280:  MOVFF  16,1A
0284:  MOVLW  1B
0286:  MOVWF  1B
0288:  RCALL  015E
028A:  MOVLW  11
028C:  MOVWF  FF6
028E:  MOVLW  01
0290:  MOVWF  FF7
0292:  MOVLW  04
0294:  MOVWF  1A
0296:  RCALL  0116
....................  
....................    output_d(sec%10); 
0298:  MOVFF  17,1C
029C:  MOVLW  0A
029E:  MOVWF  1D
02A0:  RCALL  0136
02A2:  CLRF   F95
02A4:  MOVFF  00,F8C
....................    output_high(pin_e0); 
02A8:  BCF    F96.0
02AA:  BSF    F8D.0
....................    delay_us(5); 
02AC:  MOVLW  08
02AE:  MOVWF  00
02B0:  DECFSZ 00,F
02B2:  BRA    02B0
....................    output_low(pin_e0); 
02B4:  BCF    F96.0
02B6:  BCF    F8D.0
....................  
.................... } 
02B8:  BRA    022E
....................  
.................... } 
02BA:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
